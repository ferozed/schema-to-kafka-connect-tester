/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.ferozed.json.schema.tester;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.google.common.base.Ticker;
import io.confluent.connect.json.JsonSchemaConverter;
import io.confluent.connect.json.JsonSchemaData;
import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;
import io.confluent.kafka.schemaregistry.client.SchemaMetadata;
import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;
import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;
import io.confluent.kafka.schemaregistry.json.JsonSchema;
import io.confluent.kafka.schemaregistry.json.JsonSchemaProvider;
import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer;
import org.apache.avro.Schema;
import org.apache.kafka.connect.data.SchemaAndValue;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class LibraryTest {
    @Test
    void testSimple() throws Exception {
        tryMessageWithSchema(
                "simple/schema.json",
                "simple/message.json"
        );
    }

    @Test
    void testSingleFieldOpenObject() throws Exception {
        tryMessageWithSchema(
                "single_field_open_object/schema.json",
                "single_field_open_object/message.json"
        );
    }

    void tryMessageWithSchema(String schemaPath, String messagePath) throws IOException, RestClientException {
        //CachedSchemaRegistryClient client = new CachedSchemaRegistryClient("https://schema-registry.shared.zg-int.net", 50);
        String topic = "eventhub-testdma1-stage-json-valid-itrc";
        String subject = topic + "-value";
        SchemaRegistryClient client = mock(SchemaRegistryClient.class);
        when(client.ticker()).thenReturn(Ticker.systemTicker());

        String schemaString = getResource(schemaPath);
        SchemaMetadata schemaMetadata = new SchemaMetadata(
                1,
                1,
                "JSONSCHEMA",
                null,
                schemaString
        );

        when(client.getSchemaMetadata(eq(subject), eq(11), eq(true))).thenReturn(schemaMetadata);
        when(client.getId(eq(subject), any(), anyBoolean())).thenReturn(1);
        JsonSchema jsonSchema = (JsonSchema)(new JsonSchemaProvider().parseSchema(schemaString, null, true).get());
        when(client.getSchemaBySubjectAndId(subject, 1)).thenReturn(jsonSchema);

        JsonSchemaConverter converter = new JsonSchemaConverter(client);
        Map<String,String> config = new HashMap<>();
        config.put("auto.register.schemas", "false");
        config.put("value.converter.schema.registry.url", "https://schema-registry.shared.zg-int.net");
        config.put("schema.registry.url", "https://schema-registry.shared.zg-int.net");
        config.put("object.additional.properties", "true");
        config.put("json.fail.invalid.schema", "true");

        converter.configure(config, false);

        KafkaJsonSchemaSerializer<ObjectNode> serializer =  new KafkaJsonSchemaSerializer<>(client);
        serializer.configure(config, false);

        String message = null;

        String schema = schemaMetadata.getSchema();

        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(SchemaAndValue.class, new SchemaAndValueSerializer());
        mapper.registerModule(module);

        message = getResource(messagePath);
        ObjectNode messageNode = mapper.createObjectNode();
        messageNode.put("schema", mapper.readTree(schema));
        messageNode.put("payload", mapper.readTree(message));

        byte [] serialized = serializer.serialize(topic, messageNode);

        byte [] just_the_message = Arrays.copyOfRange(serialized, 5, serialized.length-1);

        System.out.printf("Serialized message: %s\n", new String(just_the_message, StandardCharsets.UTF_8));

        SchemaAndValue schemaAndValue = converter.toConnectData(topic, serialized);

        System.out.println(schemaAndValue.toString());

    }

    String getResource(String resource) throws IOException {
        String message = null;
        try(InputStream is = this.getClass().getClassLoader().getResourceAsStream(resource)) {
            try(InputStreamReader isr = new InputStreamReader(is)) {
                StringBuilder sb = new StringBuilder(1024);
                try (BufferedReader br = new BufferedReader(isr)) {
                    br.lines().forEach(s -> sb.append(s) );
                }
                message = sb.toString();
            }
        }
        return message;
    }

    public class SchemaAndValueSerializer extends StdSerializer<SchemaAndValue> {

        public SchemaAndValueSerializer()
        {
            super(SchemaAndValue.class);
        }

        @Override
        public void serialize(SchemaAndValue value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeStartObject();
            gen.writeObjectField("schema", value.schema());
            gen.writeObjectField("payload", value.value());
            gen.writeEndObject();
        }
    }
}
